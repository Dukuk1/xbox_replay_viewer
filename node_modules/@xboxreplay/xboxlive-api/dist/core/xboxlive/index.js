"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = __importDefault(require("@xboxreplay/errors"));
const axios_1 = __importDefault(require("axios"));
const config_1 = __importDefault(require("./config"));
const config_2 = __importDefault(require("../../config"));
const path_1 = require("path");
const _isXUID = (entry) => /^([0-9]+)$/g.test(entry.toString());
const _is2XX = (statusCode) => {
    const s = String(statusCode);
    return s.length === 3 && s[0] === '2';
};
const _getPlayerUGC = (gamertagOrXUID, authorization, qs = {}, type) => __awaiter(void 0, void 0, void 0, function* () {
    const target = _isXUID(gamertagOrXUID) === true
        ? `xuid(${gamertagOrXUID})`
        : `xuid(${yield exports.getPlayerXUID(gamertagOrXUID, authorization)})`;
    return exports.call({
        url: `${config_1.default.uris[type]}/${path_1.join('users', target, type === 'screenshots' ? 'screenshots' : 'clips')}`,
        params: {
            maxItems: qs.maxItems || 25,
            continuationToken: qs.continuationToken
        }
    }, authorization);
});
const _getFromMediaHub = (gamertagOrXUID, authorization, payload = {}, target) => __awaiter(void 0, void 0, void 0, function* () {
    const xuid = _isXUID(gamertagOrXUID) === true
        ? gamertagOrXUID
        : yield exports.getPlayerXUID(gamertagOrXUID, authorization);
    return exports.call({
        url: `https://mediahub.xboxlive.com/${target}/search`,
        method: 'POST',
        data: {
            query: [`OwnerXuid eq ${xuid.toString()}`, payload.query]
                .filter(q => !!q)
                .join(' and '),
            max: Math.min(payload.max || 100, 100),
            skip: Math.max(payload.skip || 0, 0),
            continuationToken: payload === null || payload === void 0 ? void 0 : payload.continuationToken
        }
    }, authorization);
});
exports.call = (config = {}, { userHash, XSTSToken }, XBLContractVersion = 2) => {
    const XBLContractVersionHeader = {
        'x-xbl-contract-version': XBLContractVersion
    };
    config.responseType = config.responseType || 'json';
    config.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, XBLContractVersionHeader), config_2.default.request.baseHeaders), { Authorization: `XBL3.0 x=${userHash};${XSTSToken}` }), (config.headers || {}));
    return axios_1.default(config)
        .then(response => {
        if (_is2XX(response.status) === false) {
            throw errors_1.default.internal(`Invalid response status code for "${config.url}", got "${response.status}".`);
        }
        else
            return response.data;
    })
        .catch(err => {
        var _a, _b, _c, _d, _e;
        if (!!err.__XboxReplay__)
            throw err;
        else if (((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) === 400)
            throw errors_1.default.badRequest();
        else if (((_b = err.response) === null || _b === void 0 ? void 0 : _b.status) === 401)
            throw errors_1.default.unauthorized();
        else if (((_c = err.response) === null || _c === void 0 ? void 0 : _c.status) === 403)
            throw errors_1.default.forbidden();
        else if (((_d = err.response) === null || _d === void 0 ? void 0 : _d.status) === 429)
            throw errors_1.default.build('Too many requests.', {
                statusCode: 429,
                reason: 'TOO_MANY_REQUESTS'
            });
        else if (((_e = err.response) === null || _e === void 0 ? void 0 : _e.status) === 404)
            throw errors_1.default.build('Not found.', {
                statusCode: 404,
                reason: 'NOT_FOUND'
            });
        else
            throw errors_1.default.internal(err.message);
    });
};
exports.getPlayerXUID = (gamertag, authorization) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    if (_isXUID(gamertag)) {
        return String(gamertag);
    }
    const response = yield exports.call({
        url: `${config_1.default.uris.profile}/${path_1.join('users', `gt(${encodeURIComponent(gamertag)})`, 'settings')}`
    }, authorization);
    if (((_b = (_a = response === null || response === void 0 ? void 0 : response.profileUsers) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.id) === void 0) {
        throw errors_1.default.internal("Could not resolve player's XUID.");
    }
    else
        return response.profileUsers[0].id.toString();
});
exports.getPlayerSettings = (gamertagOrXUID, authorization, settings = []) => __awaiter(void 0, void 0, void 0, function* () {
    const target = _isXUID(gamertagOrXUID) === true
        ? `xuid(${gamertagOrXUID})`
        : `gt(${encodeURIComponent(gamertagOrXUID)})`;
    const response = yield exports.call({
        url: `${config_1.default.uris.profile}/${path_1.join('users', target, 'settings')}`,
        params: { settings: settings.join(',') }
    }, authorization);
    if (response.profileUsers[0] === void 0) {
        throw errors_1.default.internal("Could not resolve player's settings.");
    }
    else
        return response.profileUsers[0].settings || [];
});
exports.getPlayerActivityHistory = (gamertagOrXUID, authorization, qs = {}) => __awaiter(void 0, void 0, void 0, function* () {
    const target = _isXUID(gamertagOrXUID) === true
        ? `xuid(${gamertagOrXUID})`
        : `xuid(${yield exports.getPlayerXUID(gamertagOrXUID, authorization)})`;
    return exports.call({
        url: `${config_1.default.uris.avty}/${path_1.join('users', target, 'activity/History')}`,
        params: qs
    }, authorization);
});
exports.getPlayerScreenshots = (gamertagOrXUID, authorization, qs = {}) => __awaiter(void 0, void 0, void 0, function* () {
    return _getPlayerUGC(gamertagOrXUID, authorization, qs, 'screenshots');
});
exports.getPlayerScreenshotsFromMediaHub = (gamertagOrXUID, authorization, payload = {}) => _getFromMediaHub(gamertagOrXUID, authorization, payload, 'screenshots');
exports.getPlayerScreenshotsFromActivityHistory = (gamertagOrXUID, authorization, qs = {}) => __awaiter(void 0, void 0, void 0, function* () {
    return exports.getPlayerActivityHistory(gamertagOrXUID, authorization, Object.assign(Object.assign({}, qs), { contentTypes: 'Game', activityTypes: 'Screenshot', excludeTypes: 'GameDVR' }));
});
exports.getPlayerGameClips = (gamertagOrXUID, authorization, qs = {}) => _getPlayerUGC(gamertagOrXUID, authorization, qs, 'gameclips');
exports.getPlayerGameClipsFromMediaHub = (gamertagOrXUID, authorization, payload = {}) => _getFromMediaHub(gamertagOrXUID, authorization, payload, 'gameclips');
exports.getPlayerGameClipsFromActivityHistory = (gamertagOrXUID, authorization, qs = {}) => __awaiter(void 0, void 0, void 0, function* () {
    return exports.getPlayerActivityHistory(gamertagOrXUID, authorization, Object.assign(Object.assign({}, qs), { contentTypes: 'Game', activityTypes: 'GameDVR', excludeTypes: 'Screenshot' }));
});
